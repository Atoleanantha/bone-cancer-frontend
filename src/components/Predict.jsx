// components/Predict.jsx
import React, { useState } from "react";
import axios from "axios";
import { jsPDF } from "jspdf";
import '../App.css';

const Predict = () => {
  const [name, setName] = useState("");
  const [confidence, setConfidence] = useState("");
  const [prediction, setPrediction] = useState("");
  const [file, setFile] = useState(null);
  const [result, setResult] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);

  const handlePredict = async () => {
    const formData = new FormData();
    formData.append("name", name);
    formData.append("image", file);
    setImagePreview(URL.createObjectURL(file));

    try {
      const response = await axios.post("http://127.0.0.1:8000/predict/", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      setResult(response.data);
      setConfidence(response.data.confidence);
      setPrediction(response.data.prediction);
    } catch (error) {
      console.error(error);
      alert("Prediction failed. Check server or CORS settings.");
    }
  };

  const handleDownloadReport = () => {
    const doc = new jsPDF();

    doc.setFontSize(18);
    doc.text("Bone Cancer Detection Report", 20, 20);

    doc.setFontSize(14);
    doc.text(`Patient Name: ${name}`, 20, 40);
    doc.text(`Prediction: ${prediction}`, 20, 50);
    doc.text(`Confidence: ${confidence}`, 20, 60);

    doc.setFontSize(10);
    doc.text(
      `Disclaimer:`,
      20,
      80
    );
    doc.text(
      "This report is generated by an AI system for preliminary analysis only.",
      20,
      88
    );
    doc.text(
      "It is not a substitute for professional medical advice, diagnosis, or treatment.",
      20,
      96
    );
    doc.text(
      "Please consult a licensed healthcare provider for further evaluation.",
      20,
      104
    );

    doc.save(`${name}_BoneCancerReport.pdf`);
  };

  return (
    <div className="predict-wrapper">
      <div className="predict-card">
        <h2>Predict Patient Condition</h2>
        <input
          className="predict-input"
          type="text"
          placeholder="Patient Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          className="predict-input"
          type="file"
          accept="image/*"
          onChange={(e) => setFile(e.target.files[0])}
        />
        <button className="predict-button predict" onClick={handlePredict}>
          Predict
        </button>
        {imagePreview && (
          <div className="image-preview">
            <img
              src={imagePreview}
              alt="Preview"
              style={{ width: "100%", maxHeight: "300px", objectFit: "contain", marginBottom: "1rem" }}
            />
          </div>)}

        {result && (
          <div className="result-section">
            <p><strong>Prediction:</strong> {prediction}</p>
            <p><strong>Confidence:</strong> {confidence}</p>
            <button className="predict-button download" onClick={handleDownloadReport}>
              Download PDF Report
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Predict;
